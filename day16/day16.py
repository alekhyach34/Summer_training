# -*- coding: utf-8 -*-
"""day16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k3oiNy_HhfHeca_xOJJboti8R_-Akto_
"""

n=int(input())
l=[]
def prefix(l,n):
    x=[]
    for i in l:
        if n in i:
            x.append("True")
        else:
            x.append("False")
    return any(x)
for i in range(n):
    m,n=input().split(' ')
    if m=='1':
        l.append(n)
    elif m=='2':
        if n in l:
            print("True")
        else:
            print("False")
    elif m=='3':
        print(prefix(l,n))
######################################
n=int(input())
l=[]
def prefix(l,n):
    x=[]
    c=0
    for i in l:
        if n in i:
            c=c+1
            x.append("True")
        else:
            x.append("False")
    return c,any(x)
for i in range(n):
    m,n=input().split(' ')
    if m=='1':
        l.append(n)
    elif m=='2':
        if n in l:
            print("True")
        else:
            print("False")
    elif m=='3':
        print(prefix(l,n))
    elif m=='4':
        l.remove(n)

'''def suggestion(self,str):
    t=self.root
    for i in str:
      if i not in t.d:
        return False
      t=t.d[i]
    return t.d
t1=tries()
t1.root=t1.insert('word')
t1.root=t1.insert('worlds')
t1.root=t1.insert('apple')
t1.root=t1.insert('woo')
print(t1.search('word'))
print(t1.search('w'))
print(t1.prefix('w'))
print(t1.suggestion('w'))'''

#TRIES DATA STRUCTURE
class node:
  def __init__(self):
    self.d={}
    self.flag=0
class tries:
  def __init__(self):
    self.root=node()
  def insert(self,str):
    t=self.root
    for i in str:
      if i not in t.d:
        t.d[i]=node()
      t = t.d[i]
    t.flag=1
    return self.root
  def search(self,str):
    t=self.root
    for i in str:
      if i not in t.d:
        return False
      t=t.d[i]
    if t.flag==1:
      return True
    else:
      return False
  def prefix(self,str):
    t=self.root
    for i in str:
      if i not in t.d:
        return False
      t=t.d[i]
    return True
  def all_prefix(self,str):
    def auto(t,s):
      if t.flag==1:
        print(s)
      for i in t.d:
        auto(t.d[i],s+i)
    t=self.root
    s=''
    for i in str:
      if i in t.d:
        s=s+i
        t=t.d[i]
      else:
        return
    auto(t,s)
n=int(input())
t1=tries()
for i in range(n):
  a,s=input().split()
  if a=='1':
    t1.insert(s)
  elif a=='2':
    print(t1.search(s))
  elif a=='3':
    print(t1.prefix(s))
  elif a=='4':
    t1.all_prefix(s)

